{"version":3,"sources":["services/moviesApi.js","views/MoviesPage.js"],"names":["apiKey","fetchMoviesTrending","a","axios","get","then","response","data","results","fetchMoviesSearch","query","fetchMoviesDetails","movieId","fetchMoviesCast","cast","fetchMoviesReviews","MoviesPage","useState","setQuery","movies","setMovies","location","useLocation","history","useHistory","search","queryString","parse","useEffect","moviesApi","length","toast","warning","catch","error","console","log","onSubmit","e","preventDefault","push","type","autoComplete","autoFocus","placeholder","name","value","onChange","target","map","movie","to","pathname","id","state","from","title"],"mappings":"iWACMA,EAAS,mCAETC,EAAmB,uCAAG,sBAAAC,EAAA,sEACbC,IACVC,IADU,gEACmDJ,IAC7DK,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,WAHV,mFAAH,qDAKnBC,EAAiB,uCAAG,WAAOC,GAAP,SAAAR,EAAA,sEACXC,IACVC,IADU,0DAE0CM,EAF1C,oBAE2DV,IAErEK,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,WALZ,mFAAH,sDAOjBG,EAAkB,uCAAG,WAAOC,GAAP,SAAAV,EAAA,sEACZC,IACVC,IADU,6CACgCQ,EADhC,oBACmDZ,IAC7DK,MAAK,SAACC,GAAD,OAAcA,EAASC,QAHN,mFAAH,sDAKlBM,EAAe,uCAAG,WAAOD,GAAP,SAAAV,EAAA,sEACTC,IACVC,IADU,6CAE6BQ,EAF7B,4BAEwDZ,IAElEK,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKO,QALd,mFAAH,sDAOfC,EAAkB,uCAAG,WAAOH,GAAP,SAAAV,EAAA,sEACZC,IACVC,IADU,6CAE6BQ,EAF7B,4BAEwDZ,IAElEK,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,WALX,mFAAH,uD,wKCpBT,SAASQ,IACtB,MAA0BC,mBAAS,IAAnC,mBAAOP,EAAP,KAAcQ,EAAd,KACA,EAA4BD,mBAAS,IAArC,mBAAOE,EAAP,KAAeC,EAAf,KACMC,EAAWC,cACXC,EAAUC,cACVC,EAASC,IAAYC,MAAMN,EAASI,QAyB1C,OAhBAG,qBAAU,WACRH,EAAOf,OACLmB,IACqBJ,EAAOf,OACzBL,MAAK,SAACG,GACDA,EAAQsB,OACVV,EAAUZ,IAEVY,EAAU,IACVW,IAAMC,QAAQ,yBAGjBC,OAAM,SAACC,GACNC,QAAQC,IAAIF,QAEjB,CAACT,EAAOf,QAET,gCACE,6CACA,uBAAM2B,SAxBW,SAACC,GACpBA,EAAEC,iBACFhB,EAAQiB,KAAR,2BAAkBnB,GAAlB,IAA4BI,OAAO,UAAD,OAAYf,MAC9CQ,EAAS,KAqBP,UACE,uBACEuB,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gBACZC,KAAK,QACLC,MAAOpC,EACPqC,SAnCa,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAChC5B,EAAS4B,MAoCL,wBAAQL,KAAK,SAAb,SACE,+CAGJ,6BACGtB,EAAO8B,KAAI,SAACC,GAAD,OACV,6BACE,cAAC,IAAD,CACEC,GAAI,CACFC,SAAS,WAAD,OAAaF,EAAMG,IAC3BC,MAAO,CACL7B,OAAQJ,GAAYA,EAASI,OAASJ,EAASI,OAAS,GACxD8B,KAAMlC,EAAS+B,WALrB,SASGF,EAAMM,OAASN,EAAML,QAVjBK,EAAMG","file":"static/js/7.521beeea.chunk.js","sourcesContent":["import axios from \"axios\";\nconst apiKey = \"68d3c74a18d32691083dc9e313e197f5\";\n\nconst fetchMoviesTrending = async () => {\n  return await axios\n    .get(`https://api.themoviedb.org/3/trending/all/day?api_key=${apiKey}`)\n    .then((response) => response.data.results);\n};\nconst fetchMoviesSearch = async (query) => {\n  return await axios\n    .get(\n      `https://api.themoviedb.org/3/search/movie?query=${query}&api_key=${apiKey}`\n    )\n    .then((response) => response.data.results);\n};\nconst fetchMoviesDetails = async (movieId) => {\n  return await axios\n    .get(`https://api.themoviedb.org/3/movie/${movieId}?api_key=${apiKey}`)\n    .then((response) => response.data);\n};\nconst fetchMoviesCast = async (movieId) => {\n  return await axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=${apiKey}`\n    )\n    .then((response) => response.data.cast);\n};\nconst fetchMoviesReviews = async (movieId) => {\n  return await axios\n    .get(\n      `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${apiKey}`\n    )\n    .then((response) => response.data.results);\n};\nexport {\n  fetchMoviesTrending,\n  fetchMoviesSearch,\n  fetchMoviesDetails,\n  fetchMoviesCast,\n  fetchMoviesReviews,\n};\n","import { useState, useEffect } from \"react\";\r\nimport { useLocation, NavLink, useHistory } from \"react-router-dom\";\r\nimport queryString from \"query-string\";\r\nimport * as moviesApi from \"../services/moviesApi\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n// import Navigation from \"../components/Navigation\";\r\nexport default function MoviesPage() {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [movies, setMovies] = useState([]);\r\n  const location = useLocation();\r\n  const history = useHistory();\r\n  const search = queryString.parse(location.search);\r\n  const handleChange = ({ target: { value } }) => {\r\n    setQuery(value);\r\n  };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    history.push({ ...location, search: `?query=${query}` });\r\n    setQuery(\"\");\r\n  };\r\n  useEffect(() => {\r\n    search.query &&\r\n      moviesApi\r\n        .fetchMoviesSearch(search.query)\r\n        .then((results) => {\r\n          if (results.length) {\r\n            setMovies(results);\r\n          } else {\r\n            setMovies([]);\r\n            toast.warning(\"Results not found\");\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n  }, [search.query]);\r\n  return (\r\n    <div>\r\n      <h2>Movies Page</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Search movies\"\r\n          name=\"query\"\r\n          value={query}\r\n          onChange={handleChange}\r\n        />\r\n        <button type=\"submit\">\r\n          <span>Search</span>\r\n        </button>\r\n      </form>\r\n      <ul>\r\n        {movies.map((movie) => (\r\n          <li key={movie.id}>\r\n            <NavLink\r\n              to={{\r\n                pathname: `/movies/${movie.id}`,\r\n                state: {\r\n                  search: location && location.search ? location.search : \"\",\r\n                  from: location.pathname,\r\n                },\r\n              }}\r\n            >\r\n              {movie.title || movie.name}\r\n            </NavLink>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}